Node.js
const express = require('express');
const pool = require('../db'); 

const router = express.Router();

router.post('/seed', async (req, res) => {
  try {
    
    res.status(200).json({ message: 'Data seeded successfully' });
  } catch (error) {
    console.error('Error seeding data:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});
Frontend code
Retrieve Paginated and Sorted Data:
module.exports = router;
const express = require('express');
const pool = require('../db');

const router = express.Router();

router.get('/', async (req, res) => {
  try {
    const { page = 1, sortBy = 'created_at', sortOrder = 'asc' } = req.query;
    const limit = 20;
    const offset = (page - 1) * limit;

   

    res.status(200).json({ data: /* Your fetched data */, totalPages: /* Total pages */, currentPage: page });
  } catch (error) {
    console.error('Error fetching data:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

module.exports = router;

Front end d code:

import React, { useState, useEffect } from 'react';
import axios from 'axios';

const DataTable = () => {
  const [data, setData] = useState([]);
  const [page, setPage] = useState(1);

  useEffect(() => {
    axios.get(`http://localhost:3000/api/data?page=${page}`) 
      .then(response => {
        setData(response.data.data);
      })
      .catch(error => {
        console.error('Error fetching data:', error);
      });
  }, [page]);

  return (
    <div>
      {/* Your code to display data in a table */}
      {/* Include pagination and sorting options */}
    </div>
  );
};

export default DataTable;
Display "date" and "time" Columns:
<thead>
    <tr>
      <th>Sno</th>
      <th>Customer Name</th>
      <th>Age</th>
      <th>Phone</th>
      <th>Location</th>
      <th>Date</th>
      <th>Time</th>
    </tr>
  </thead>
  <tbody>
    {/* Map through the data and render rows */}
    {data.map((record) => (
      <tr key={record.sno}>
        <td>{record.sno}</td>
        <td>{record.customer_name}</td>
        <td>{record.age}</td>
        <td>{record.phone}</td>
        <td>{record.location}</td>
        <td>{new Date(record.created_at).toLocaleDateString()}</td>
        <td>{new Date(record.created_at).toLocaleTimeString()}</td>
      </tr>
    ))}
  </tbody>
</table>
conclusion sort:
<button onClick={() => handleSort('date')}>Sort by Date</button>
<button onClick={() => handleSort('time')}>Sort by Time</button>
